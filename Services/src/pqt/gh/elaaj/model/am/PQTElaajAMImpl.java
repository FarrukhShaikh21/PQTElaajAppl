package pqt.gh.elaaj.model.am;

import java.sql.CallableStatement;

import java.sql.SQLException;
import java.sql.Types;

import javax.faces.application.FacesMessage;
import javax.faces.context.ExternalContext;
import javax.faces.context.FacesContext;

import javax.servlet.http.HttpSession;

import oracle.jbo.ViewObject;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.DBTransaction;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;

import pqt.gh.elaaj.model.am.common.PQTElaajAM;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Aug 20 19:47:17 PKT 2021
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class PQTElaajAMImpl extends ApplicationModuleImpl implements PQTElaajAM {
    /**
     * This is the default constructor (do not remove).
     */
    public PQTElaajAMImpl() {
    }

    /**
     * Container's getter for RegisterVO1.
     * @return RegisterVO1
     */
    public ViewObjectImpl getRegisterVO1() {
        return (ViewObjectImpl) findViewObject("RegisterVO1");
    }
    
    
    public void Apply() {
            if (getDBTransaction().isDirty()) {
                getDBTransaction().commit();

                FacesMessage Message = new FacesMessage("Record Saved Successfully!");
                Message.setSeverity(FacesMessage.SEVERITY_INFO);
                FacesContext fc = FacesContext.getCurrentInstance();
                fc.addMessage(null, Message);
            }
        }

    public String VerifyUserAuth(String pUserName, String pUserPassword) {
        String Message = null, vOutput = "Success";
        DBTransaction txn = getDBTransaction();
        CallableStatement callableStatement =
            txn.createCallableStatement("begin SP_VERIFY_ELAAJ_USER(:1,:2,:3,:4,:5,:6,:7); end;", DBTransaction.DEFAULT);
        try {
            callableStatement.setString(1, pUserName);
            callableStatement.setString(2, pUserPassword);
            callableStatement.registerOutParameter(3, Types.VARCHAR);
            callableStatement.registerOutParameter(4, Types.VARCHAR);
            callableStatement.registerOutParameter(5, Types.VARCHAR);
            callableStatement.registerOutParameter(6, Types.VARCHAR);
            callableStatement.registerOutParameter(7, Types.VARCHAR);
            String vStatus = null, vMsg = null, vCertNo = null, vPolNo = null, vEmpCode = null;
            callableStatement.execute();
            vStatus = callableStatement.getString(3);
            vMsg = callableStatement.getString(4);
            vCertNo = callableStatement.getString(5);
            vPolNo = callableStatement.getString(6);
            vEmpCode = callableStatement.getString(7);
            callableStatement.close();

            if (vStatus.equalsIgnoreCase("S")) {
                FacesContext fctx = FacesContext.getCurrentInstance();
                ExternalContext ectx = fctx.getExternalContext();
                HttpSession userSession = (HttpSession) ectx.getSession(false);
                userSession.setAttribute("pCNICNo", pUserName);
                userSession.setAttribute("pCertNo", vCertNo);
                userSession.setAttribute("pPolNo", vPolNo);
                userSession.setAttribute("pEmpCode", vEmpCode);
                
            } else if ("F".equals(vStatus)) {
                Message = vMsg;
                vOutput = "Failure";
                FacesMessage msg = new FacesMessage(Message);
                msg.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext context = FacesContext.getCurrentInstance();
                context.addMessage(null, msg);
                return Message;
            }

        } catch (SQLException sqle) {
            try {
                callableStatement.close();
            } catch (SQLException e) {
                ;
            }
            vOutput = "Failure";
            FacesMessage msg = new FacesMessage(sqle.getMessage());
            msg.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext context = FacesContext.getCurrentInstance();
            context.addMessage(null, msg);
        }
        return vOutput;
    }

    /**
     * Container's getter for VuElaajMobileUserVO1.
     * @return VuElaajMobileUserVO1
     */
    public ViewObjectImpl getVuElaajMobileUserVO1() {
        return (ViewObjectImpl) findViewObject("VuElaajMobileUserVO1");
    }

    /**
     * Container's getter for VuGhsElaajCoveredMemberVO1.
     * @return VuGhsElaajCoveredMemberVO1
     */
    public ViewObjectImpl getVuGhsElaajCoveredMemberVO1() {
        return (ViewObjectImpl) findViewObject("VuGhsElaajCoveredMemberVO1");
    }

    /**
     * Container's getter for VuEmployeeCoverDtlVO1.
     * @return VuEmployeeCoverDtlVO1
     */
    public ViewObjectImpl getVuEmployeeCoverDtlVO1() {
        return (ViewObjectImpl) findViewObject("VuEmployeeCoverDtlVO1");
    }

    /**
     * Container's getter for DependentVL1.
     * @return DependentVL1
     */
    public ViewLinkImpl getDependentVL1() {
        return (ViewLinkImpl) findViewLink("DependentVL1");
    }
    
    public void executeBenefitDetail(){
        ViewObject HVO = getVuGhsElaajCoveredMemberVO1();
        ViewObject DVO = getVuEmployeeCoverDtlVO1();
        String pCertNo = null;
        
        try{
            pCertNo = HVO.getCurrentRow().getAttribute("EmpSrNo").toString();
        }catch(Exception e){
            pCertNo = null; 
        }
        System.out.println("pCertNo ==>> "+ pCertNo);
        
        DVO.setWhereClause(null);
        DVO.setWhereClause("EmpSrNo = "+pCertNo);
        DVO.executeQuery();
        
    }

    /**
     * Container's getter for ClaimsDetailVO1.
     * @return ClaimsDetailVO1
     */
    public ViewObjectImpl getClaimsDetailVO1() {
        return (ViewObjectImpl) findViewObject("ClaimsDetailVO1");
    }

    /**
     * Container's getter for EmployeeClaimVL1.
     * @return EmployeeClaimVL1
     */
    public ViewLinkImpl getEmployeeClaimVL1() {
        return (ViewLinkImpl) findViewLink("EmployeeClaimVL1");
    }

    /**
     * Container's getter for VuElaajPanelHospitalVO1.
     * @return VuElaajPanelHospitalVO1
     */
    public ViewObjectImpl getVuElaajPanelHospitalVO1() {
        return (ViewObjectImpl) findViewObject("VuElaajPanelHospitalVO1");
    }

    /**
     * Container's getter for ElaajClaimIntimateEOVO1.
     * @return ElaajClaimIntimateEOVO1
     */
    public ViewObjectImpl getElaajClaimIntimateEOVO1() {
        return (ViewObjectImpl) findViewObject("ElaajClaimIntimateEOVO1");
    }

    /**
     * Container's getter for ElaajClaimReimburstmentEOVO1.
     * @return ElaajClaimReimburstmentEOVO1
     */
    public ViewObjectImpl getElaajClaimReimburstmentEOVO1() {
        return (ViewObjectImpl) findViewObject("ElaajClaimReimburstmentEOVO1");
    }
}

